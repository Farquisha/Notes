Block-listing vs. Allow-listing
Block-listing (Formerly Black-listing)
    implicit ACCEPT
    Explicit DENY
Allow-listing (Formerly White-listing
    Implicit DENY
    Implicit ACCEPT

Windows, Linux, or MAC
    Windows - Norton, Mcafee, ZoneAlarm, Avast, etc.
    Linux - iptables, nftables, UFW, firewalld.
    MAC - Little Snitch, LuLu, Vallum, etc.
=======================================================================================================================
Configure iptables filtering rules:
Tables of iptables
    filter - default table. Provides packet filtering.
    nat - used to translate private ←→ public address and ports.
    mangle - provides special packet alteration. Can modify various fields header fields.
    raw - used to configure exemptions from connection tracking.
    security - used for Mandatory Access Control (MAC) networking rules.


Chains of iptables:
    PREROUTING - packets entering NIC before routing
    INPUT - packets to localhost after routing
    FORWARD - packets routed from one NIC to another. (needs to be enabled)
    OUTPUT - packets from localhost to be routed
    POSTROUTING - packets leaving system after routing

Common iptable options:
-t - Specifies the table. (Default is filter)
-A - Appends a rule to the end of the list or below specified rule
-I - Inserts the rule at the top of the list or above specified rule
-R - Replaces a rule at the specified rule number
-D - Deletes a rule at the specified rule number
-F - Flushes the rules in the selected chain
-L - Lists the rules in the selected chain using standard formatting
-S - Lists the rules in the selected chain without standard formatting
-P - Sets the default policy for the selected chain
-n - Disables inverse lookups when listing rules
--line-numbers - Prints the rule number when listing rules
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
BEFORE YOU FLUSH - CHANGE DEFAULT POLICY TO ACCEPT

Common iptable options:
-p - Specifies the protocol
-i - Specifies the input interface
-o - Specifies the output interface
--sport - Specifies the source port
--dport - Specifies the destination port
-s - Specifies the source IP
-d - Specifies the destination IP
-j - Specifies the jump target action
---------------------------------------------------------------------------------------------------------------
iptables syntax:
iptables -t [table] -A [chain] [rules] -j [action]

    Table: filter*, nat, mangle
    Chain: INPUT, OUTPUT, PREROUTING, POSTROUTING, FORWARD
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

iptables rules syntax:
-i [ iface ]
-o [ iface ]
-s [ ip.add | network/CIDR ]
-d [ ip.add | network/CIDR ]
MORE;
-p icmp [ --icmp-type type# { /code# } ]
-p tcp [ --sport | --dport { port1 |  port1:port2 } ]
-p tcp [ --tcp-flags SYN,ACK,PSH,RST,FIN,URG,ALL,NONE ]
-p udp [ --sport | --dport { port1 | port1:port2 } ]
MORE;
    -m to enable iptables extensions:

-m state --state NEW,ESTABLISHED,RELATED,UNTRACKED,INVALID
-m mac [ --mac-source | --mac-destination ] [mac]
-p [tcp|udp] -m multiport [ --dports | --sports | --ports { port1 | port1:port15 } ]
-m bpf --bytecode [ 'bytecode' ]
-m iprange [ --src-range | --dst-range { ip1-ip2 } ]

iptables action syntax
    ACCEPT - Allow the packet
    REJECT - Deny the packet (send an ICMP reponse)
    DROP - Deny the packet (send no response)
-j [ ACCEPT | REJECT | DROP ]

Modify iptables:
    Flush table:
    iptables -t [table] -F
    Change default policy:
    iptables -t [table] -P [chain] [action]
    Lists rules with rule numbers:
    iptables -t [table] -L --line-numbers
    Lists rules as commands interpreted by the system:
    iptables -t [table] -S
    Inserts rule before Rule number:
    iptables -t [table] -I [chain] [rule num] [rules] -j [action]
    Replaces rule at number:
    iptables -t [table] -R [chain] [rule num] [rules] -j [action]
    Deletes rule at number:
    iptables -t [table] -D [chain] [rule num]
===================================================================================================================
NFT SHIZNACH

1. Create the Table

nft add table [family] [table]
    [family] = ip*, ip6, inet, arp, bridge and netdev.
    [table] = user provided name for the table.


2. Create the Base Chain
nft add chain [family] [table] [chain] { type [type] hook [hook]
    priority [priority] \; policy [policy] \;}
* [chain] = User defined name for the chain.
* [type] =  can be filter, route or nat.
* [hook] = prerouting, ingress, input, forward, output or
         postrouting.
* [priority] = user provided integer. Lower number = higher
             priority. default = 0. Use "--" before
             negative numbers.
* ; [policy] ; = set policy for the chain. Can be
              accept (default) or drop.
 Use "\" to escape the ";" in bash


3. Create a rule in the Chain
nft add rule [family] [table] [chain] [matches (matches)] [statement]
* [matches] = typically protocol headers(i.e. ip, ip6, tcp,
            udp, icmp, ether, etc)
* (matches) = these are specific to the [matches] field.
* [statement] = action performed when packet is matched. Some
              examples are: log, accept, drop, reject,
              counter, nat (dnat, snat, masquerade)

Rule Match options:
ip [ saddr | daddr { ip | ip1-ip2 | ip/CIDR | ip1, ip2, ip3 } ]
tcp flags { syn, ack, psh, rst, fin }
tcp [ sport | dport { port1 | port1-port2 | port1, port2, port3 } ]
udp [ sport| dport { port1 | port1-port2 | port1, port2, port3 } ]
icmp [ type | code { type# | code# } ]
ct state { new, established, related, invalid, untracked }
iif [iface]
oif [iface]

Modify NFTables:
nft { list | flush } ruleset
nft { delete | list | flush } table [family] [table]
nft { delete | list | flush } chain [family] [table] [chain]

Modify NFTables:
    List table with handle numbers;
    nft list table [family] [table] [-a]
    Adds after position;
    nft add rule [family] [table] [chain] [position <position>] [matches] [statement]
    Inserts before position;
    nft insert rule [family] [table] [chain] [position <position>] [matches] [statement]
    Replaces rule at handle;
    nft replace rule [family] [table] [chain] [handle <handle>] [matches] [statement]
    Deletes rule at handle;
    nft delete rule [family] [table] [chain] [handle <handle>]
    To change the current policy;
    nft add chain [family] [table] [chain] { \; policy [policy] \;}

===============================================================================================================

NAT & PAT operators & Chains


iptables -t nat -A POSTROUTING -o eth0 -s 192.168.0.1 -j SNAT --to 1.1.1.1
iptables -t nat -A POSTROUTING -p tcp -o eth0 -s 192.168.0.1 -j SNAT --to 1.1.1.1:9001
iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE

iptables -t nat -A PREROUTING -i eth0 -d 8.8.8.8 -j DNAT --to 10.0.0.1
iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 22 -j DNAT --to 10.0.0.1:22
iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j DNAT --to 10.0.0.2:80
iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 443 -j DNAT --to 10.0.0.3:443
iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080

Creating nat tables and chains:

    Create the NAT table
    nft add table ip NAT
    Create the NAT chains
    nft add chain ip NAT PREROUTING { type nat hook prerouting priority 0 \; }
    nft add chain ip NAT POSTROUTING { type nat hook postrouting priority 0 \; }

Source NAT:
nft add rule ip NAT POSTROUTING ip saddr 10.10.0.40 oif eth0 snat 144.15.60.11
nft add rule ip NAT POSTROUTING oif eth0 masquerade

Destination NAT:
nft add rule ip NAT PREROUTING iif eth0 ip daddr 144.15.60.11 dnat 10.10.0.40
nft add rule ip NAT PREROUTING iif eth0 tcp dport { 80, 443 } dnat 10.1.0.3
nft add rule ip NAT PREROUTING iif eth0 tcp dport 80 redirect to 8080

-------------------------------------------------------------------------------------------------------------------------
Configure iptables mangle rules:

Mangle examples with iptables
iptables -t mangle -A POSTROUTING -o eth0 -j TTL --ttl-set 128
iptables -t mangle -A POSTROUTING -o eth0 -j DSCP --set-dscp 26

Mangle examples with nftables:

nft add table ip MANGLE
nft add chain ip MANGLE INPUT {type filter hook input priority 0 \; policy accept \;}
nft add chain ip MANGLE OUTPUT {type filter hook output priority 0 \; policy accept \;}
nft add rule ip MANGLE OUTPUT oif eth0 ip ttl set 128
nft add rule ip MANGLE OUTPUT oif eth0 ip dscp set 26















































