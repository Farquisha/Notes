Transport Layer Protocols

    Connection-oriented:
        TCP - Segments
        Unicast traffic
    Connection-less
        UDP - Datagrams
        Broadcast, Multicast, or Unicast Traffic

IPSec
    Modes: Transport or Tunnel
    Headers:
        ESP (protocol 50)
        AH (protocol 51)
        IKE (UDP port 500 or 4500)

SOCKS 4/5 (TCP 1080)

    RFC 1928
    Uses various Client / Server exchange messages
        Client can provide authentication to server
        Client can request connections from server
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

SOCKS4:
    No Authentication
    Only IPv4
    No UDP support
    No Proxy binding. Client’s IP is not relayed to destination.

SOCKS5:
    Various methods of Authentication
    IPv4 and IPv6 support
    UDP support
    Supports Proxy binding. Client’s IP is relayed to destination.

-----------------------------------------------------------------------

RPC (any port):
    Allows a program to execute a request on a local/remote computer
    Hides network complexities
    XML, JSON, SOAP, and gRPC
    User application will:
        1. Request for information from external server
        2. Receives the information from the external server
        3. Display collected data to User

========================================================================================================

OSI Layer 7 protocols and headers


Telnet (TCP 23):
    Remote Login
    Authentication
    Clear Text
    Credentials susceptible to interception

SSH (TCP 22):
    Messages provide:
        Client/server authentication
        Asymmetric or PKI for key exchange
        Symmetric for session
        User authentication
        Data stream channeling
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
Components of SSH Architecture
    Client / Server / Session
    Keys
        User Key - Asymmetric public key used to identify the user to the server
        Host Key - Asymmetric public key used to identify the server to the user
        Session Key - Symmetric key created by the client and server to protect the session’s

SSH Implementation Concerns:
    Using password authentication only
    Key rotation
    Key management
    Implementation specification (libssh, sshtrangerthings)
________________________SSH Usage_______________________________
$ ssh {user}@{ip}
$ ssh student@172.16.82.106

SSH options
-p {port} - Alternate port
-l {username} - Specify the username
-X - Enable X11 forwarding
-v(vv) - Add logging and debugging
-i {identity file} - Specify a private key identity
-F {config file} - Specify an alternate user config file
-N - Do not send remote commands
-T - Do not create a pseudo vty
-C - Enable compression
-f - Backgroud process after authentication
-J user@host - Proxy jump
-L [bind_address:]port:host:hostport
-R [bind_address:]port:host:hostport
-D {port}
________________________________________________________________

SSH FILES:
    Known-Hosts Database
    ~/.ssh/known_hosts

    Configuration Files
    /etc/ssh/ssh_config
    /etc/ssh/sshd_config

SSH-KEYGEN

ssh-keygen -t rsa -b 4096 -C "Student"
    Create your own SSH Public/Private keys
        -t Encryption (rsa|dsa|ecdsa|ed25519)
        -b Bit length (1024|2048|4096)
        -C Adds a comment
    ~/.ssh/id_rsa and ~/.ssh/id_rsa.pu

SSH-COPY-ID

ssh-copy-id student@172.16.82.106
    Copies your SSH Public key to the remote server
    Saves key to ~/.ssh/authorized_keys on remote server
    Allows you to authenticate with server using your key instead of password
    Must secure your private key

========================================================================================================

HTTP(s) (TCP 80/443):
    User Request methods
        GET / HEAD / POST / PUT
    Server response Codes
        100, 200, 300, 400, 500

HTTP(s) Vulnerabilities:
    Flooding
    Amplification
    Low and slow
    Drive-By Downloads
    BeEF Framework

========================================================================================================

DNS query/response:
    Resolves Names to IP addresses
    Queries and responses use UDP
    DNS response larger than 512 bytes use TCP
        DNS Zone Transfer
        DNS Security

DNS Records
    A - IPv4 record
    AAAA - IPv6 record
    MX - Mail Server record
    TXT - Human-readable text
    NS - Name Server record
    SOA - Start of Authority

========================================================================================================

FTP (TCP 20/21):
    RFC 959
    Port 21 open for Control
    Port 20 only open during data transfer
FTP:
    Authentication or Anonymous
    Clear Text

    Modes:
        Active (default)
        Passive

FTP Active issues:
    NAT and Firewall traversal issues
    Complications with tunneling through SSH
    Passive FTP solves issues related to Active mode and is most often used in modern systems

========================================================================================================

TFTP (UDP 69)
tftp
    Clear-Text
    Reliability provided at Application layer
    Used by routers and switches to transfer IOS and config files

========================================================================================================

SMTP (TCP 25):
    Used to send email
    No encryption
    SMTP over TLS/SSL (SMTPS)
        TCP Ports 587 and 465

========================================================================================================

POP (TCP 110):
    Receives email
    No sync with server
    No encryption
    POP3

========================================================================================================

IMAP (TCP 143):
    Receives email
    Sync with server
    No encryption
    IMAP4

========================================================================================================

DHCP (UDP 67/68)

DHCPv4:
    DORA
        Discover (Broadcast)
        Offer (Unicast)
        Request (Broadcast)
        Acknowlege (Unicast)

DHCPv6:
    If Managed flag is set during SLAAC:
        Solicit (Multicast)
        Advertise (Unicast)
        Request or Information Request (Multicast)
        Reply (Unicast)

DHCP Vulnerabilities:
    Rogue DHCP
    Evil Twin
    DHCP Starvation

========================================================================================================

NTP (UDP 123):
    Stratum 0 - authoritative time source
    Up to Stratum 15
    Vulnerable to crafted packet injection

========================================================================================================

AAA Protocols:

    Authentication, Authorization, and Accounting
    For third party authentication

TACACS (TCP 49) Simple/Extended
RADIUS (UDP 1645/1646 and 1812/1813)
Diameter (TCP 3868)
SNMP (UDP 161/162)
    Versions:
        SNMPv1 - RFC 1157
        SNMPv2c - RFC 1441
        SNMPv3 - RFC 3410

SNMP (UDP 161/162):
  7 Message Types:
        Get Request
        Set Request
        Get Next
        Get Bulk
        Response
        Trap
        Inform

SNMP Vulnerabilities:
    v1 and 2c
        Weak Community Strings
        Lack of Encryption
        Information Disclosure
        Can be "sniffed"

========================================================================================================

RTP (UDP any above 1023)

========================================================================================================

RDP (TCP 3389):
    Developed by Microsoft (Open Standard)
        No server software needed

    Other Proprietary RDP software
        Requires to have 3rd pary software installed

========================================================================================================

Kerberos (UDP 88):
    Secure network authentication protocol
    Clients obtain tickets to access services
    Mutual authentication
    Used by Active Directory

========================================================================================================

LDAP(s) (TCP 389 and 636)
    Client/server model
    Hierarchical
    Directory schema
    Unsecure and secure versions

========================================================================================================
































