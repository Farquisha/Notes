ISATAP:
    Allows IPv6 hosts to communicate over an IPv4 network within a site (local network)
    Can be used over the internet for specific site-to-site communications.
    Generates a Link-Local address using its IPv4 address
    192.168.199.99 â†’ FE80::0000:5EFE:c0a8:c763

Teredo Tunneling:
    RFC 4380
    Allows IPv4 clients to access IPv6 clients
    Encapsulates IPv6 packets within UDP
    Commonly used for devices behind NAT
    Uses the 2001:0000::/32 prefix

=======================================================================================================================
Common Protocols used with Covert Channels:
    ICMP
    DNS
    HTTP
-----------------------------------------------------------------------------------------------------------------------
How to Detect Covert Channels:

    Host Analysis
        Requires knowledge of each applications expected behavior.

    Network Analysis
        A good understanding of your network and the common network protocols being used is the key

    Baselining of what is normal to detect what is abnormal
-----------------------------------------------------------------------------------------------------------------------
Detecting Covert Channels with ICMP:

    ICMP works with one request and one reply answer
        Type 8 code 0 request
        Type 0 code 0 answer

    Check for:
        Payload imbalance
        Request/responce imbalance
        Large payloads in response
(one request, one reply. check that there is only one of each in a pair. Check for a typical ICPM payload side.)
-----------------------------------------------------------------------------------------------------------------------
Detecting Covert Channels with DNS:
    DNS is a request/response protocol
    1 request typically gets 1 response
    Payloads generally do no exceed 512 bytes

    Check for:
        Request/response imbalances
        Unusual payloads
        Burstiness or continuous use
(one request, one reply. Check for consistant pairs. Check for human readability, and make sure the packets don't exceed size limit.)
-----------------------------------------------------------------------------------------------------------------------
Detecting Covert Channels with HTTP:
    Request/Response protocol to pull web content
    GET request may include .png, .exe, .(anything) files
    Can vary in sizes of payloads
    Typically "bursty" but not steady
=======================================================================================================================
Configuration Files:
    Client Configuration File (/etc/ssh/ssh_config)
    Server Configuration File (/etc/ssh/sshd_config)
    Known Hosts File (~/.ssh/known_hosts)
(After first connect, Key is saved to /home/student/.ssh/known_hosts)
=======================================================================================================================
SSH Key Change Fix:
ssh-keygen -f "/home/student/.ssh/known_hosts" -R "172.16.82.106"
(Copy/Paste the ssh-geygen message to remove the Host key from the known_hosts file)
=======================================================================================================================
SSH Options:
    -L - Creates a port on the client mapped to a ip:port via the server
    -D - Creates a port on the client and sets up a SOCKS4 proxy tunnel where the target ip:port is specified dynamically
    -R - Creates the port on the server mapped to a ip:port via the client
    -NT - Do not execute a remote command and disable pseudo-tty (will hang window)
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
LOCAL PORT FORWARDING:
ssh -p <optional alt port> <user>@<server ip> -L <local bind port>:<tgt ip>:<tgt port> -NT
<<or>>
ssh -L <local bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<server ip> -NT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
EXAMPLEs:
Internet_Host:
ssh student@172.16.1.15 -L 1122:localhost:22
or
ssh -L 1122:localhost:22 student@172.16.1.15

Internet_Host:
ssh student@localhost -p 1122
Blue_DMZ_Host-1~$
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Internet_Host:
ssh student@172.16.1.15 -L 1123:localhost:23
or
ssh -L 1123:localhost:23 student@172.16.1.15

Internet_Host:
telnet localhost 1123
Blue_DMZ_Host-1~$
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Forward through Tunnel:

Internet_Host:
ssh student@172.16.1.15 -L 2222:172.16.40.10:22
ssh student@localhost -p 2222 -L 3322:172.16.82.106:22

Internet_Host:
ssh student@localhost -p 3322
Blue_Host-1~$
=======================================================================================================================
Dynamic Port Forwarding:

ssh <user>@<server ip> -p <alt port> -D <port> -NT
or
ssh -D <port> -p <alt port> <user>@<server ip> -NT

- Proxychains default port is 9050
- Creates a dynamic socks4 proxy that interacts alone, or with a previously established remote or local port forward.
- Allows the use of scripts and other userspace programs through the tunnel
-----------------------------------------------------------------------------------------------------------------------
SSH Dynamic Port Forwarding 1-Step

Internet_Host:
ssh student@172.16.1.15 -D 9050
or
ssh -D 9050 student@172.16.1.15
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SSH Dynamic Port Forwarding 1-Step

Internet_Host:
proxychains ./scan.sh
proxychains nmap -Pn 172.16.40.0/27 -p 21-23,80
proxychains ssh student@172.16.40.10
proxychains telnet 172.16.40.10
proxychains wget -r http://172.16.40.10
proxychains wget -r ftp://172.16.40.10
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SSH Dynamic Port Forwarding 2-Step

Internet_Host:
ssh student@172.16.1.15 -L 2222:172.16.40.10:22
or
ssh -L 2222:172.16.40.10:22 student@172.16.1.15

Internet_Host:
ssh student@localhost -p 2222 -D 9050
or
ssh -D 9050 student@localhost -p 2222
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SSH Dynamic Port Forwarding 2-Step

Internet_Host:
proxychains ./scan.sh
proxychains nmap -Pn 172.16.82.96/27 -p 21-23,80
proxychains ssh student@172.16.82.106
proxychains telnet 172.16.82.106
proxychains wget -r http://172.16.82.106
proxychains wget -r ftp://172.16.82.106
=======================================================================================================================
Remote Port Forwarding:

ssh -p <optional alt port> <user>@<server ip> -R <remote bind port>:<tgt ip>:<tgt port> -NT
<<or>>
ssh -R <remote bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<server ip> -NT
-----------------------------------------------------------------------------------------------------------------------
localhost of client:
Blue_DMZ_Host-1:
ssh student@10.10.0.40 -R 4422:localhost:22
or
ssh -R 4422:localhost:22 student@10.10.0.40

Internet_Host:
ssh student@localhost -p 4422
Blue_DMZ_Host-1~$
=======================================================================================================================
Bridging Local and Remote Port Forwarding:

Internet_Host:
ssh student@172.16.1.15 -L 2223:172.16.40.10:23 -NT
<<or>>
ssh -L 2223:172.16.40.10:23 student@172.16.1.15 -NT

Internet_Host:
telnet localhost 2223
Blue_INT_DMZ_Host-1~$
=======================================================================================================================
=======================================================================================================================
Network Recon Methodology:
    Define Objectives
    Perform Passive External Reconnaissance
    Perform Active External Reconnaissance
    Perform Passive Internal Reconnaissance
    Perform Active Internal Reconnaissance








































