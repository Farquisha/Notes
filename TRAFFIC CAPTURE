capture Libraries:
    Libpcap - https://www.tcpdump.org/
    WinPcap - https://www.winpcap.org/
    NPcap - https://nmap.org/npcap/
===============================================================================================================
use of sniffing tools and methods:
Practical Uses:
    Network troubleshooting
    Diagnosing improper routing or switching
    Identifying port/protocol misconfigurations
    Monitor networking consumption
    Intercepting usernames and passwords
    Eavesdrop on network communications
Disadvantages:
    Requires elevate permissions
    Can only capture what NIC can see
    Cannot capture local traffic
    Can consume massive amounts of system resources
    Lost packets on busy networks
=================================================================================================================
can be captured in two ways:
    Hardware Packet Sniffers
    Software Packet Sniffers
=================================================================================================================
Describe Socket Types:
    User Space Sockets;
        Stream socket - TCP
        Datagram socket - UDP
    Kernel Space Sockets
        RAW Sockets

Interface Naming:
    Traditional:
        eth0, eth1
    Consistent:
        eno1, ens3
=================================================================================================================
Capture Libraries:
    Wireshark
    TCPDUMP
    TSHARK
Capture Library. Requires root for:
        Promicious Mode (Listen on all NICs)
        All captured packets are created as RAW Sockets

Types of sniffing:
    Active
    Passive
=================================================================================================================
real-time network traffic sniffing


Explain TCPDUMP primitives -
    User friendly capture expressions:
        src or dst
        host or net
        tcp or udp

TCPDUMP Primitive Qualifiers:
    type - the 'kind of thing' that the id name or number refers to
        host, net, port, or portrange
    dir - transfer direction to and/or from
        src or dst
    proto - restricts the match to a particular protocol(s)
        ether, arp, ip, ip6, icmp, tcp, or udp

--------------------------------------------------
Basic TCPDump options:
    -A = print payload in ASCII
    -D = list interfaces
    -i = specify capture interface
    -e = print data-link headers
    -X or XX = print payload in HEX and ASCII
--------------------------------------------------
Basic TCPDump options:
    -w = write to pcap
    -r = read from pcap
    -v, vv, or vvv = verbosity
    -n = no inverse lookups
    -d = Dump the compiled packet-matching code in a human readable form (Debug mode)
--------------------------------------------------
Logical Operators

    Primitives may be combined using:
        Concatenation: 'and'(&&)
        Alteration: 'or'(||)
        Negation: 'not'(!)
--------------------------------------------------
Relational Operators:
    < or < =
    > or >=
    = or == or !=
--------------------------------------------------
TCPDump Primitive Examples:
To print all ethernet traffic:
    tcpdump ether
To print all packets related to ARP:
    tcpdump arp
To print all packets related to ICMP:
    tcpdump icmp
To print all ICMP echo-request packets :
    tcpdump 'icmp[icmptype] = icmp-echo'
To print all ICMP echo-reply packets :
    tcpdump 'icmp[icmptype] = icmp-reply'
To print all packets arriving at or departing from 192.168.1.1:
    tcpdump host 192.168.1.1
To print all packets arriving at 192.168.1.1:
    tcpdump dst host 192.168.1.1
To print all packets departing from 192.168.1.1:
    tcpdump src host 192.168.1.1
To print all packets arriving at or departing from 192.168.1.0/24 network:
    tcpdump net 192.168.1.0/24
To print all packets departing from 192.168.1.0/24 network:
    tcpdump src net 192.168.1.0/24
To print all packets arriving at 192.168.1.0/24 network:
    tcpdump dst net 192.168.1.0/24
To print all packets related to IPv4:
    tcpdump ip
To print all packets related to IPv6:
    tcpdump ip6
To print all packets related to TCP:
    tcpdump tcp
To print all packets related to UDP:
    tcpdump udp
To print all packets arriving at or departing from TCP port 22:
    tcpdump tcp port 22
To print all packets arriving at TCP port 22:
    tcpdump tcp dst port 22
To print all packets departing from TCP port 22:
    tcpdump tcp src port 22
To print all packets arriving at or departing from TCP or UDP port 53:
    tcpdump port 53
To print all packets with TCP flag ACK set:
    'tcp[tcpflags] = tcp-ack'
=================================================================================================================
function of a Berkley packet filter (BPF)
    Similar in function to primitives
    Reduces redudant computations
    More complex expressions


Compare primitives and BPFs:
    Primitives (macros):
        CMU/Stanford Packet Filter (CSPF) Model commonly called Boolean Expression Tree
        Simple and easy filter expressions
        First user-level packet filter model
        Memory-stack-based filter machine which can create bottlenecks on model CPUs
        can have redundant computations of the same information

    Berkley Packet Filters (BPF):
        Control Flow Graph (CFG) Model
        **Uses a simple (non-shared) buffer model which can make it 1.5 to 20 times faster than CSPF**
        Can be more complex to create expressions but offer far more precision
=================================================================================================================
Construct a BPF


Kernel API:
    TCPDUMP requests a RAW Socket creation
    Filters are set using the SO_ATTACH_FILTER
    SO_ATTACH_FILTER allows us to attach a Berkley Packet Filter to the socket to capture incoming packets.

BPF examples:
    tcpdump -i eth0 'ether[12:2] = 0x0806'
    tcpdump -i eth1 'ip[9] = 0x06'
    tcpdump -i eth0 'tcp[0:2] = 53 || tcp[2:2] = 53'
    tcpdump 'ether[12:2] = 0x0800 && (tcp[2:2] != 22 && tcp[2:2] != 23)'

Bitwise Masking:
    BPFs can read 1 (byte), 2 (half-word) or 4 (word)
    BPFs alone will only filter to the byte level
    Bit-wise masking allow filtering precision to the bit level
    Binary (0) to ignore bit
    Binary (1) to match bit

Bitwise Masking examples:
    tcpdump 'ether[12:4] & 0xffff0fff = 0x81000abc'
    tcpdump 'ip[1] & 252 = 32'
    tcpdump 'ip[6] & 224 != 0'
    tcpdump 'tcp[13] & 0x11 = 0x11'
    tcpdump 'tcp[12] & 0xf0 > 0x50'
=================================================================================================================
BPFs at the Data-Link layer

Search for the destination broadcast MAC address:
    'ether[0:4] = 0xffffffff && ether[4:2] = 0xffff'
    'ether[0:2] = 0xffff && ether[2:2]= 0xffff && ether[4:2] = 0xffff'
Search for the source MAC address of fa:16:3e:f0:ca:fc ;
    'ether[6:4] = 0xfa163ef0 && ether[10:2] = 0xcafc'
    'ether[6:2] = 0xfa16 && ether[8:2] = 0x3ef0 && ether[10:2] = 0xcafc'

Search for unicast (0x00) or multicast (0x01) MAC address:
    'ether[0] & 0x01 = 0x00'
    'ether[0] & 0x01 = 0x01'
    'ether[6] & 0x01 = 0x00'
    'ether[6] & 0x01 = 0x01'

Search for IPv4, ARP, VLAN Tag, and IPv6 respectively:
    ether[12:2] = 0x0800
    ether[12:2] = 0x0806
    ether[12:2] = 0x8100
    ether[12:2] = 0x86dd

Search for 802.1Q VLAN 100:
    'ether[12:2] = 0x8100 && ether[14:2] & 0x0fff = 0x0064'
    'ether[12:4] & 0xffff0fff = 0x81000064'

Search for double VLAN Tag:
    'ether[12:2] = 0x8100 && ether[16:2] = 0x8100'
=================================================================================================================
BPFs at the Network layer

Search for IHL greater than 5:
    'ip[0] & 0x0f > 0x05'
    'ip[0] & 15 > 5'

Search for ipv4 DSCP value of 16:
    'ip[1] & 0xfc = 0x40'
    'ip[1] & 252 = 64'
    'ip[1] >> 2 = 16'
Search for traffic class in ipv6 having a value:
    'ip6[0:2] & 0x0ff0 != 0'

Search for ONLY the RES flag set. DF and MF must be off:
    'ip[6] & 0xE0 = 0x80'
    'ip[6] & 224 = 128'

Search for RES bit set. The other 2 flags are ignored so they can be on or off:
    'ip[6] & 0x80 = 0x80'
    'ip[6] & 128 = 128'

Search for DF bit set. The other 2 flags are ignored so they can be on or off:
    'ip[6] & 0x40 = 0x40'
    'ip[6] & 64 = 64'

Search for ONLY the MF flag set. RES and DF must be off:
    'ip[6] & 0xe0 = 0x20'
    'ip[6] & 224 = 32'

Search for MF bit set. The other 2 flags are ignored so they can be on or off:
    'ip[6] & 0x20 = 0x20'
    'ip[6] & 32 = 32'

Search for offset field having any value greater than zero (0):
    'ip[6:2] & 0x1fff > 0'
    'ip[6:2] & 8191 > 0'

Search for MF set or offset field having any value greater than zero (0):
    'ip[6] & 0x20 = 0x20 || ip[6:2] & 0x1fff > 0'
    'ip[6] & 32 = 32 || ip[6:2] & 8191 > 0'

Search for TTL in ipv4(6) packet:
    'ip[8] = 128'
    'ip[8] < 128'
    'ip[8] >= 128'
    'ip6[7] = 128'
    'ip6[7] < 128'
    'ip6[7] >= 128'

Search for ICMPv4(6), TCP, or UDP encapsulated within an ipv4(6) packet:
    'ip[9] = 0x01'
    'ip[9] = 0x06'
    'ip[9] = 0x11'
    'ip6[6] = 0x3A'
    'ip6[6] = 0x06'
    'ip6[6] = 0x11'

Search for ipv4 source or destination address of 10.1.1.1:
'ip[12:4] = 0x0a010101'
'ip[16:4] = 0x0a010101'

Search for ipv6 source or destination address starting with FE80:
'ip6[8:2] = 0xfe80'
'ip6[24:2] = 0xfe80'
=================================================================================================================
BPFs at the Transport layer


    Search for TCP source port 3389.
'tcp[0:2] = 3389'
    Search for TCP destination port 3389.
'tcp[2:2] = 3389'
    Search for TCP source or destination port 3389.
'tcp[0:2] = 0x0d3d || tcp[2:2] = 0x0d3d'

    Search for TCP with options.
'tcp[12] & 0xF0 > 0x50'
'tcp[12] & 240 > 80'
    Search for TCP Reserve field with a value.
'tcp[12] & 0x0F != 0'
'tcp[12] & 15 > 0'

    Search for TCP Flags ACK and SYN (both or 1 must be on).
'tcp[13] & 0x12 != 0'
'tcp[13] & 0x12 > 0'

    Search for TCP Urgent Pointer having a value.
'tcp[18:2] != 0'
'tcp[18:2] > 0'
=================================================================================================================
Wireshark’s use of BPFs


Wireshark Display Filters vs Capture filters
    Capture filters - used to specify which packets should be saved to disk while capturing.
    Display filters - allow you to change the view of what packets are displayed of those that are captured.

Wireshark Display Filters:
    Protocol Headers
    Addresses/Ports
    Header Fields
    Follow Streams
    Apply as Filter

Popular Wireshark Menus:
    Colorize Traffic
    Protocol Hierarchy
    Firewall Rules
    Exporting Objects
    Decrypt Traffic
    Conversations
    Endpoints
    I/O Graph
    ipv4 and ipv6 statistics
    Expert Information
    Geo Location
=================================================================================================================
passive OS fingerprinting (p0f) - Similar to tcpdump except it only captures traffic that matches signatures in its database file


Operating systems
    Searches for specific signatures in:
        Most Operating Systems
        Most Browsers
        Search Robots
        Command Line Tools
















































