function q1($var1,$var2,$var3,$var4) {
    <# Return the product of the arguments #>
    $prod = ($var1 * $var2 * $var3 * $var4)
    $prod
    return
}

_==========================================================================================_

function q2($arr,$rows,$cols,$key) {
    <# Search the 2 dimensional array for the first occurance of key at column index 0
       and return the value at column index 9 of the same row.
       Return -1 if the key is not found.
    #>
    foreach($row in $arr) {
        if($row[0] -eq $key){
            return $row[9]
        }
    }
    return -1
}

_==========================================================================================_

function q3 {
    <# In a loop, prompt the user to enter positive integers one at time.
       Stop when the user enters a -1. Return the maximum positive
       value that was entered."
	#>
    begin {
        $nument = 0
        $numhold = @()
    }
    Process {
        while($nument -ne -1){
            $nument = Read-Host "enter a positive interger"
            $numhold += [int]$nument
        }
    }
    End {
        $finzr = $numhold | Sort-Object -Descending
        $finzr[0]
        return
    }
}

--OR--

#Vals = @()
do {
$val = Read-Host
if($val -ne -1)
  $vals += $val
}
} until($val -eq -1)
return ($vals | Measure-Object -Maximum).Maximum
--OR--
$max = 0
$usr = 0
while($usr -ne -1){
$usr = read-host
$usr = [int]$usr
if($usr -gt $max){$max = $usr}

_==========================================================================================_

function q4($filename,$whichline) {
    <# Return the line of text from the file given by the `$filename
	   argument that corresponds to the line number given by `$whichlitne.
	   The first line in the file corresponds to line number 0."
	#>
    $file = Get-Content $filename
    return $file[$whichline]
    
}

_==========================================================================================_

function q5($path) {
    <# Return the child items from the given path sorted
       ascending by their Name
	#>
    $sorpat = Get-ChildItem $path | Sort-Object
    $sorpat
    return
}

_==========================================================================================_

function q6 {
    <# Return the sum of all elements provided on the pipeline
	#>
    $sum = 0
    Foreach($i in $input){$sum += $i}
    return $sum
}

_==========================================================================================_

function q7 {
	<# Return only those commands whose noun is process #>
    $si = Get-Command -Noun process
    return $si
}

_==========================================================================================_

function q8($adjective) {
    <# Return the string 'PowerShell is ' followed by the adjective given
	   by the `$adjective argument
	#>    
    $COC = "PowerShell is " + $adjective
    return $COC
    
}

_==========================================================================================_

function q9($addr) {
	<# Return `$true when the given argument is a valid IPv4 address,
	   otherwise return `$false. For the purpose of this function, regard
	   addresses where all octets are in the range 0-255 inclusive to
	   be valid.
	#>
  

    foreach($octet in $addr.split(".")){
        if([int]$octet -lt 0 -or [int]$octet -gt 255){
            return false
        }
    }
    return True
}

_==========================================================================================_

function q10 ($filepath,$lasthash) {
    <# Return `$true if the contents of the file given in the
       `$filepath argument have changed since `$lasthash was
       computed. `$lasthash is the previously computed SHA256
       hash (as a string) of the contents of the file. #>

       $privh = (Get-FileHash $filepath -Algorithm SHA256).Hash
       if($privh -like $lasthash){
            return $false
       }
        else {
            return $true
        }
    }
























