WINDOWS BOOT PROCESS
    Q: How can I tell if my machine is running BIOS or UEFI?
    A1: Use findstr
findstr /C:"Detected boot environment" "C:\Windows\Panther\Setupact.log"
Get-Content C:\Windows\Panther\Setupact.log | Select-String "Detected boot environment"

    A2: Use the bcedit command
bcdedit | findstr /i winload

====================================================================================================================
All user session parent process IDs should be 1 and never 0
====================================================================================================================
Loading the Operating System Kernel

On UEFI Systems:
bootmgfw.efi reads a BCD (Boot Configuration Data) located in the EFI system partition to load the file winload.efi   <- ends in efi, so UEFI


On BIOS Systems:
bootmgr or NTLDR reads the file \Boot\BCD to locate winload.exe   <- ends in exe, so BIOS
====================================================================================================================
Spooler is a service running on ppid 0
1. Showing the Spooler Service using SC

sc query spooler

SERVICE_NAME: Spooler
DISPLAY_NAME: Print Spooler
        TYPE               : 110  WIN32_OWN_PROCESS  (interactive)
        STATE              : 4  RUNNING
                                (STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)
        WIN32_EXIT_CODE    : 0  (0x0)
        SERVICE_EXIT_CODE  : 0  (0x0)
        CHECKPOINT         : 0x0
        WAIT_HINT          : 0x0
----------------------------------------------------------------------------------
2. Showing the Service Control Manager registry key

reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services | findstr Spooler

HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Spooler
-----------------------------------------------------------------------------------
3. Showing the contents of the Spooler Service Registry Key

reg query HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Spooler

HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Spooler
    DisplayName    REG_SZ    @%systemroot%\system32\spoolsv.exe,-1
    Group    REG_SZ    SpoolerGroup
    ImagePath    REG_EXPAND_SZ    %SystemRoot%\System32\spoolsv.exe 
    Description    REG_SZ    @%systemroot%\system32\spoolsv.exe,-2
    ObjectName    REG_SZ    LocalSystem 
===================================================================================================
Get-CimInstance win31_service | Format-List (Input, Service, filepath, probably more)
===================================================================================================
Q: What can I do if the Windows boot settings became corrupted?
A: Fix it with the bcdedit command

bcdedit /?

What does a normal bcdedit output look like?

c:\demo>bcdedit

Windows Boot Manager
--------------------
identifier              {bootmgr}
device                  partition=C:
description             Windows Boot Manager
locale                  en-US
inherit                 {globalsettings}
default                 {current}
resumeobject            {2bd08882-0f8f-11e9-94b6-0002c9550dce}
displayorder            {current}
toolsdisplayorder       {memdiag}
timeout                 29

Windows Boot Loader
-------------------
identifier              {current}
device                  partition=C:
path                    \windows\system32\winload.exe
description             Windows 7 - Tiger Paw
locale                  en-US
inherit                 {bootloadersettings}
recoverysequence        {91061b50-0fa8-11e9-aa6e-00155d49334a}
displaymessageoverride  Recovery
recoveryenabled         Yes
allowedinmemorysettings 0x15000075
osdevice                partition=C:
systemroot              \windows
resumeobject            {2bd08882-0f8f-11e9-94b6-0002c9550dce}
nx                      OptIn
bootmenupolicy          Standard
===========================================================================================================

                                                LINUX BOOT PROCESS

===========================================================================================================

Again, .efi is UEFI. any other executable linking format is BIOS

===========================================================================================================
3.1.1 Master Boot Record Layout

The first 512 bytes of a hard drive contains the Master Boot Record. It contains the following information:

    Bootstrap Code  --  446 bytes

    Partition entry 1  --  446-461 bytes
    Partition entry 2  --  462-467 bytes
    Partition entry 3  --  478-493 bytes
    Partition entry 4  --  494-509 bytes
    Boot signature  --  510
============================================================================================================
Locate the hard drive and partition in Linux

student@linux-opstation-kspt:~$ lsblk 

NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
loop0    7:0    0 31.1M  1 loop /snap/snapd/10707
loop1    7:1    0 55.4M  1 loop /snap/core18/1944
loop2    7:2    0 44.7M  1 loop /snap/openstackclients/38
loop3    7:3    0 55.5M  1 loop /snap/core18/1988
loop4    7:4    0 31.1M  1 loop /snap/snapd/11036
sr0     11:0    1  514K  0 rom  /media/student/config-2
vda    252:0    0  128G  0 disk 
└─vda1 252:1    0  128G  0 part / 

=============================================================================================================

Examining the contents of the MBR with xxd
student@linux-opstation-kspt:~$ sudo xxd -l 512 -g 1 /dev/vda 
------------------------------------------------------------------------
Making a copy of the MBR with dd — Run this on Ops Station

student@linux-opstation-kspt:~$  **  dd if=/dev/vda of=MBRcopy bs=512 count=1  **
dd: failed to open '/dev/vda': Permission denied 
student@linux-opstation-kspt:~$  **  sudo !!  **
1+0 records in
1+0 records out
512 bytes copied, 0.00026952 s, 1.9 MB/s
student@linux-opstation-kspt:~$ file MBRcopy 
MBRcopy: DOS/MBR boot sector

	Execute dd which copies 512 bytes once from /dev/vda to a file in my current directory called MBR
	Notice, dd failed to run
	!! represents the previous command. Run it with sudo permissions.
	Execute file to read the file signature from the MBR file

================================================================================================================


On BIOS Systems using MBR

    Stage 1 : boot.img located in the first 440 bytes of the MBR loads…​
    Stage 1.5 : core.img located in the MBR between the bootstrap and first partition. It loads…​
    Stage 2 : /boot/grub/i386-pc/normal.mod which loads the grub menu and then reads

        /boot/grub/grub.cfg - Which displays a list of Linux kernels available to load on the system
-----------------------------------------------------------------------------------------------------------------

On UEFI Systems using GPT

    Stage 1 : grubx64.efi Located on an EFI partition or in /boot loads…​
    Stage 2 : /boot/grub/x86_64-efi/normal.mod

        /boot/grub/grub.cfg - Which displays a list of Linux kernels available to load on the system


=================================================================================================================

Showing System calls in Linux

student@linux-opstation-kspt:/$ ltrace -S cat /etc/passwd _truncated_

==================================================================================================================

Modules in Linux

student@linux-opstation-kspt:/$ ltrace -S lsmod

===================================================================================================================
There are two main initialization daemons now : Systemd and SysV.

Stack Overflow article on how the kernel knows to load /sbin/init: 
https://serverfault.com/questions/372007/linux-kernel-and-the-init-process


===================================================================================================================

xxd -l 1 mbroken

===================================================================================================================
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
---------------------------------------------WINDOWS PROCESS VALIDITY----------------------------------------------
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
===================================================================================================================
Today’s Malware typically use their stealth and obfuscation abilities in order to hide in various artifacts such as:
- processes
- files
- registry keys
- drivers
===================================================================================================================
                                                ***Useful cmdlets***
- Get-Process
- tasklist
View only the processes I define and sort by PID:
- Get-Process SMSS,CSRSS,LSASS | Sort -Property Id
___________________________________________________________________________________________________________________
View modules/DLLs used by defined process and their file locations:
- Get-Process chrome | foreach {$_.modules} | more
- Get-Process -Name "*chrome*" | Select-Object -ExpandProperty Modules | more
___________________________________________________________________________________________________________________
Use the Get-Ciminstance Win32_Process cmdlet to veiw processes with PPID
- Get-Ciminstance Win32_Process      (View the additional Properties with | Get-Member)
View the processes with PID and PPID sorted by PID
- Get-Ciminstance Win32_service | Select Name, Processid, Pathname | more   (Pipe in ft -wrap to see full file name/path)
===================================================================================================================
                                            ***Command prompt***
View all processes:
- tasklist or tasklist /v for verbose
Display service information for each process without truncation
- tasklist /svc
Display modules/dlls associated to all processes:
- tasklist /m | more
Display modules/dlls associated to a specific process:
- tasklist /m /fi "IMAGENAME eq chrome.exe"
Formating options:
tasklist /fo:{table|list|csv}`
Filtering for specific string/process:
- tasklist /fi "IMAGENAME eq lsass.exe"
===================================================================================================================
                                -*-*-*-*View Scheduled Tasks In PowerShell/Command Prompt*-*-*-*-
View all properties of the first scheduled task:
- Get-ScheduledTask | Select * | select -First 1
- schtasks /query /tn "IchBinBosh" /v /fo list
- Task Scheduler
Sysinternal tool:
- Autoruns

===================================================================================================================
                                            -*-*Create IchBinBosh task*-*-
schtasks /Create /TN IchBinBosh /SC MINUTE /MO 15 /TR "powershell.exe -win hidden -encode `
JABMAD0ATgBlAHcALQBPAGIAagBlAGMAdAAgAFMAeQBzAHQAZQBtAC4ATgBlAHQALgBTAG8AYwBrAGUAdABzAC4AVABjAHAATABpAHMAdABlAG4AZQ `
ByACgANgA2ADYANgApADsAJABMAC4AUwB0AGEAcgB0ACgAKQA7AFMAdABhAHIAdAAtAFMAbABlAGUAcAAgAC0AcwAgADYAMAA="

Confirm IchBinBosh exists and View Properties:
    In Command Prompt:
        schtasks /query | select-string -pattern IchBinBosh -Context 2,4
    In PowerShell:
        Get-ScheduledTask | Select * | select-string -pattern IchBinBosh -Context 2,4
===================================================================================================================
View Network Connections In PowerShell:
    Show all Connections in the "Established" state:
        Get-NetTCPConnection -State Established
View Network Connections in Command Prompt:
    Show netstat help and point out the following:
        netstat /?
    Displays all TCP/UDP connections with ports in numerical form with PID and executable associated to the connections:
        netstat -anob | more
===================================================================================================================
                        _____What are some Abnormal things we could see in a process list?_____
Misspelling of process names and descriptions
    - Ex. scvhost instead of svchost
Which directory are windows executables typically run out of?
    - System Processes run from C:\Windows\System32
    - Third party processes will run elsewhere
    - Ex. Chrome runs from C:\Program Files
Processes that have non-standard listening ports open or ports with SYN/SENT
    - HTTP being used on any port other than 80. (ex. HTTP over port 808 or 880)
Multiple processes with the same name that should be unique such as LSASS, SMSS
    - System process with a high PID
Handles or DLLs a process is using
    Dig Deeper into DLLs:
        Microsoft Compromised DLLs - https://www.microsoft.com/security/blog/2020/12/18/
        analyzing-solorigate-the-compromised-dll-file-that-started-a-sophisticated-cyberattack-and-how-microsoft-defender-helps-protect/
        DLL Hijacking - https://itm4n.github.io/windows-dll-hijacking-clarified/
===================================================================================================================
                                            View file manifest settings
Map the Sysinternals Command in Powershell
    net use * http://live.sysinternals.com
    z:
View the autoelevate setting of slui
    ./sigcheck -m C:\Windows\System32\slui.exe
View the highest available setting of regedit
    ./sigcheck -m C:\windows\regedit.exe
How to locate Windows executables that have autoelevate in the manifest
    ./strings –s c:\windows\system32\*.exe | findstr /i autoelevate
===================================================================================================================



===================================================================================================================



===================================================================================================================















































































